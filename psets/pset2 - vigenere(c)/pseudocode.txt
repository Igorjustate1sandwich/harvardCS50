1. GET KEYWORD
2. CONVERT KEYWORD TO NUMBER

Example:
Input = A
Output = 0

Ciphertext = (Plaintext + Key) % 26

EXAMPLE
Key: Using the letter 'A' as an example
Plaintext: Using the letter 'H' as an example.

1. Convert your key aka 'A' to SHIFT VALUE = 0.            
2. Convert your plaintext aka 'H' to ASCII = 72


Ciphertext = ('H' + 'A') % 26
Ciphertext = (72 + 0) % 26

Shift value: Range from 0 (A) to 26 (Z)

65 = 0
66 = 1
67 = 2
etc....

Plaintext:
- Convert Plaintext to ASCII







#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <cs50.h>

int key;

int main(int argc, string argv[])
{
    // CHECK 1: Make sure there is only one command line argument.
    if (argc != 2)
    {
        printf("Try Again\n"); return 1;
    }
    // Converts contents of argv[1] into a string 's'.
    string s = (argv[1]);
    
    // CHECK 2: Make sure command line argument is a letter.
    for (int i = 0; i < strlen(s); i++)
    {
        // If any word in the string != alphabetical (letter) then print "Try Again"
        if (isalpha(s[i]) == false)
        {
            printf("Try Again\n"); return 1;
        }
    }
    
    string plainText = get_string("plaintext: "); // Get userinput and store in 'plainText' string.
    printf("ciphertext: "); //Place to print cipher text


    // Encryption Algorithim
    for (int i = 0; i < strlen(plainText); i++) // Run when i < length of string 'plainText'
    {
        // Encrypt uppercase plaintext if any letter inside 'plainText' is uppercase.
        if isupper(plainText[i]) 
        {
            // A. KEY ALGORTIHIM EXPLAINED Using example of s = 'B'.
            key = (tolower(s[0]) - 97); 
                // 1. Convert 'B' (Ascii = 66) to 'b' (Ascii = 98) using tolower.
                // 2. Key = 98 - 97 = 1
            
            // B. CIPHERTEXT ALGORITIHM EXPLAINED using plainText = 'HELLO' & key = 1.
            printf("%c", (((plainText[i] + key) - 65) % 26) + 65); 
                // 1. Add '1' to all letters of 'HELLO'. H + 1 = I. E + 1 = F and so on...
                // Final printed value = 'IFMMP'.   
        }

        // Encrypt lowercase plaintext
        if islower(plainText[i])
        {
            key = (toupper(s[0]) - 65);
            printf("%c", (((plainText[i] + key) - 97 ) % 26 ) + 97);
        }
    }
    
    
    printf("\n");
    printf("KEY: %i \n", key);
}





